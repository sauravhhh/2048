<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>2048 Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }
        
        body {
            background-color: #faf8ef;
            color: #776e65;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 10px;
        }
        
        .game-container {
            width: 100%;
            max-width: 500px;
            text-align: center;
        }
        
        .header {
            margin-bottom: 20px;
        }
        
        h1 {
            font-size: 48px;
            color: #776e65;
            margin-bottom: 10px;
        }
        
        .score-container {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .score-box {
            background-color: #bbada0;
            padding: 10px 20px;
            border-radius: 3px;
            color: white;
            position: relative;
            display: inline-block;
            min-width: 80px;
        }
        
        .score-label {
            font-size: 13px;
            text-transform: uppercase;
        }
        
        .score-value {
            font-size: 25px;
            font-weight: bold;
        }
        
        .game-board {
            background-color: #bbada0;
            border-radius: 6px;
            padding: 10px;
            position: relative;
            margin: 0 auto;
            width: 100%;
            max-width: 400px;
            aspect-ratio: 1/1;
        }
        
        .grid-container {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-template-rows: repeat(4, 1fr);
            gap: 10px;
            width: 100%;
            height: 100%;
        }
        
        .grid-cell {
            background-color: #cdc1b4;
            border-radius: 3px;
            width: 100%;
            height: 100%;
        }
        
        .tile {
            position: absolute;
            width: calc(25% - 7.5px);
            height: calc(25% - 7.5px);
            background-color: #eee4da;
            border-radius: 3px;
            font-weight: bold;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 35px;
            transition: all 0.15s ease-in-out;
            line-height: 1;
        }
        
        .tile-2 { background-color: #eee4da; color: #776e65; }
        .tile-4 { background-color: #ede0c8; color: #776e65; }
        .tile-8 { background-color: #f2b179; color: #f9f6f2; }
        .tile-16 { background-color: #f59563; color: #f9f6f2; }
        .tile-32 { background-color: #f67c5f; color: #f9f6f2; }
        .tile-64 { background-color: #f65e3b; color: #f9f6f2; }
        .tile-128 { background-color: #edcf72; color: #f9f6f2; font-size: 30px; }
        .tile-256 { background-color: #edcc61; color: #f9f6f2; font-size: 30px; }
        .tile-512 { background-color: #edc850; color: #f9f6f2; font-size: 30px; }
        .tile-1024 { background-color: #edc53f; color: #f9f6f2; font-size: 25px; }
        .tile-2048 { background-color: #edc22e; color: #f9f6f2; font-size: 25px; }
        
        .game-message {
            margin-top: 20px;
            font-size: 18px;
            min-height: 25px;
        }
        
        .game-controls {
            margin-top: 20px;
            display: flex;
            justify-content: center;
            gap: 10px;
        }
        
        .btn {
            background-color: #8f7a66;
            color: #f9f6f2;
            border: none;
            border-radius: 3px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .btn:hover {
            background-color: #9f8a76;
        }
        
        .instructions {
            margin-top: 20px;
            font-size: 16px;
            line-height: 1.5;
        }
        
        .game-over-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.7);
            display: none;
            justify-content: center;
            align-items: center;
            border-radius: 6px;
            z-index: 10;
        }
        
        .game-over-content {
            text-align: center;
        }
        
        .game-over-text {
            font-size: 36px;
            font-weight: bold;
            margin-bottom: 20px;
        }
        
        @media (max-width: 480px) {
            h1 {
                font-size: 36px;
            }
            
            .tile {
                font-size: 28px;
            }
            
            .tile-128, .tile-256, .tile-512 {
                font-size: 24px;
            }
            
            .tile-1024, .tile-2048 {
                font-size: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="header">
            <h1>2048</h1>
            <div class="score-container">
                <div class="score-box">
                    <div class="score-label">Score</div>
                    <div class="score-value" id="score">0</div>
                </div>
                <div class="score-box">
                    <div class="score-label">Best</div>
                    <div class="score-value" id="best-score">0</div>
                </div>
            </div>
        </div>
        
        <div class="game-board" id="game-board">
            <div class="grid-container">
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
                <div class="grid-cell"></div>
            </div>
            
            <div class="game-over-overlay" id="game-over">
                <div class="game-over-content">
                    <div class="game-over-text" id="game-over-text">Game Over!</div>
                    <button class="btn" id="try-again-btn">Try Again</button>
                </div>
            </div>
        </div>
        
        <div class="game-message" id="game-message"></div>
        
        <div class="game-controls">
            <button class="btn" id="new-game-btn">New Game</button>
        </div>
        
        <div class="instructions">
            <strong>HOW TO PLAY:</strong> Use your arrow keys to move the tiles. When two tiles with the same number touch, they merge into one!
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Game elements
            const gameBoard = document.getElementById('game-board');
            const scoreElement = document.getElementById('score');
            const bestScoreElement = document.getElementById('best-score');
            const gameMessageElement = document.getElementById('game-message');
            const gameOverElement = document.getElementById('game-over');
            const gameOverTextElement = document.getElementById('game-over-text');
            const newGameBtn = document.getElementById('new-game-btn');
            const tryAgainBtn = document.getElementById('try-again-btn');
            
            // Game variables
            let board = [];
            let score = 0;
            let bestScore = localStorage.getItem('bestScore') || 0;
            let hasWon = false;
            let gameOver = false;
            
            // Initialize best score display
            bestScoreElement.textContent = bestScore;
            
            // Initialize game
            function initGame() {
                // Reset game state
                board = Array(4).fill().map(() => Array(4).fill(0));
                score = 0;
                hasWon = false;
                gameOver = false;
                
                // Update UI
                updateScore();
                gameMessageElement.textContent = '';
                gameOverElement.style.display = 'none';
                
                // Clear existing tiles
                const tiles = document.querySelectorAll('.tile');
                tiles.forEach(tile => tile.remove());
                
                // Add two initial tiles
                addNewTile();
                addNewTile();
                
                // Update the board display
                updateBoard();
            }
            
            // Update score display
            function updateScore() {
                scoreElement.textContent = score;
                
                if (score > bestScore) {
                    bestScore = score;
                    bestScoreElement.textContent = bestScore;
                    localStorage.setItem('bestScore', bestScore);
                }
            }
            
            // Add a new tile to the board
            function addNewTile() {
                const emptyCells = [];
                
                for (let r = 0; r < 4; r++) {
                    for (let c = 0; c < 4; c++) {
                        if (board[r][c] === 0) {
                            emptyCells.push({r, c});
                        }
                    }
                }
                
                if (emptyCells.length > 0) {
                    const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                    board[randomCell.r][randomCell.c] = Math.random() < 0.9 ? 2 : 4;
                }
            }
            
            // Update the board display
            function updateBoard() {
                // Clear existing tiles
                const tiles = document.querySelectorAll('.tile');
                tiles.forEach(tile => tile.remove());
                
                // Create new tiles
                for (let r = 0; r < 4; r++) {
                    for (let c = 0; c < 4; c++) {
                        if (board[r][c] !== 0) {
                            const tile = document.createElement('div');
                            tile.className = `tile tile-${board[r][c]}`;
                            tile.textContent = board[r][c];
                            tile.style.left = `${c * 25 + (c + 1) * 2.5}%`;
                            tile.style.top = `${r * 25 + (r + 1) * 2.5}%`;
                            gameBoard.appendChild(tile);
                        }
                    }
                }
            }
            
            // Move tiles in the specified direction
            function move(direction) {
                if (gameOver) return false;
                
                let moved = false;
                const newBoard = JSON.parse(JSON.stringify(board));
                
                // Process movement based on direction
                if (direction === 'left') {
                    for (let r = 0; r < 4; r++) {
                        const row = newBoard[r].filter(val => val !== 0);
                        
                        // Merge tiles
                        for (let c = 0; c < row.length - 1; c++) {
                            if (row[c] === row[c + 1]) {
                                row[c] *= 2;
                                score += row[c];
                                row.splice(c + 1, 1);
                                
                                // Check for win
                                if (row[c] === 2048 && !hasWon) {
                                    hasWon = true;
                                    gameMessageElement.textContent = "You've reached 2048! Keep going!";
                                }
                            }
                        }
                        
                        // Fill with zeros
                        while (row.length < 4) {
                            row.push(0);
                        }
                        
                        // Check if row changed
                        for (let c = 0; c < 4; c++) {
                            if (board[r][c] !== row[c]) {
                                moved = true;
                            }
                        }
                        
                        newBoard[r] = row;
                    }
                } else if (direction === 'right') {
                    for (let r = 0; r < 4; r++) {
                        const row = newBoard[r].filter(val => val !== 0);
                        
                        // Merge tiles from right
                        for (let c = row.length - 1; c > 0; c--) {
                            if (row[c] === row[c - 1]) {
                                row[c] *= 2;
                                score += row[c];
                                row.splice(c - 1, 1);
                                c--;
                                
                                // Check for win
                                if (row[c] === 2048 && !hasWon) {
                                    hasWon = true;
                                    gameMessageElement.textContent = "You've reached 2048! Keep going!";
                                }
                            }
                        }
                        
                        // Fill with zeros at the beginning
                        while (row.length < 4) {
                            row.unshift(0);
                        }
                        
                        // Check if row changed
                        for (let c = 0; c < 4; c++) {
                            if (board[r][c] !== row[c]) {
                                moved = true;
                            }
                        }
                        
                        newBoard[r] = row;
                    }
                } else if (direction === 'up') {
                    for (let c = 0; c < 4; c++) {
                        const column = [];
                        for (let r = 0; r < 4; r++) {
                            if (newBoard[r][c] !== 0) {
                                column.push(newBoard[r][c]);
                            }
                        }
                        
                        // Merge tiles
                        for (let r = 0; r < column.length - 1; r++) {
                            if (column[r] === column[r + 1]) {
                                column[r] *= 2;
                                score += column[r];
                                column.splice(r + 1, 1);
                                
                                // Check for win
                                if (column[r] === 2048 && !hasWon) {
                                    hasWon = true;
                                    gameMessageElement.textContent = "You've reached 2048! Keep going!";
                                }
                            }
                        }
                        
                        // Fill with zeros
                        while (column.length < 4) {
                            column.push(0);
                        }
                        
                        // Check if column changed
                        for (let r = 0; r < 4; r++) {
                            if (board[r][c] !== column[r]) {
                                moved = true;
                            }
                            newBoard[r][c] = column[r];
                        }
                    }
                } else if (direction === 'down') {
                    for (let c = 0; c < 4; c++) {
                        const column = [];
                        for (let r = 0; r < 4; r++) {
                            if (newBoard[r][c] !== 0) {
                                column.push(newBoard[r][c]);
                            }
                        }
                        
                        // Merge tiles from bottom
                        for (let r = column.length - 1; r > 0; r--) {
                            if (column[r] === column[r - 1]) {
                                column[r] *= 2;
                                score += column[r];
                                column.splice(r - 1, 1);
                                r--;
                                
                                // Check for win
                                if (column[r] === 2048 && !hasWon) {
                                    hasWon = true;
                                    gameMessageElement.textContent = "You've reached 2048! Keep going!";
                                }
                            }
                        }
                        
                        // Fill with zeros at the beginning
                        while (column.length < 4) {
                            column.unshift(0);
                        }
                        
                        // Check if column changed
                        for (let r = 0; r < 4; r++) {
                            if (board[r][c] !== column[r]) {
                                moved = true;
                            }
                            newBoard[r][c] = column[r];
                        }
                    }
                }
                
                if (moved) {
                    board = newBoard;
                    updateScore();
                    addNewTile();
                    updateBoard();
                    
                    // Check if game is over
                    if (isGameOver()) {
                        gameOver = true;
                        gameOverElement.style.display = 'flex';
                        gameOverTextElement.textContent = 'Game Over!';
                    }
                }
                
                return moved;
            }
            
            // Check if the game is over
            function isGameOver() {
                // Check for empty cells
                for (let r = 0; r < 4; r++) {
                    for (let c = 0; c < 4; c++) {
                        if (board[r][c] === 0) {
                            return false;
                        }
                    }
                }
                
                // Check for possible merges
                for (let r = 0; r < 4; r++) {
                    for (let c = 0; c < 4; c++) {
                        const current = board[r][c];
                        
                        // Check right
                        if (c < 3 && board[r][c + 1] === current) {
                            return false;
                        }
                        
                        // Check down
                        if (r < 3 && board[r + 1][c] === current) {
                            return false;
                        }
                    }
                }
                
                return true;
            }
            
            // Keyboard controls
            document.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowLeft') {
                    e.preventDefault();
                    move('left');
                } else if (e.key === 'ArrowRight') {
                    e.preventDefault();
                    move('right');
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    move('up');
                } else if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    move('down');
                }
            });
            
            // Touch controls
            let touchStartX = 0;
            let touchStartY = 0;
          let touchEndX = 0;
            let touchEndY = 0;
            
            gameBoard.addEventListener('touchstart', (e) => {
                touchStartX = e.changedTouches[0].screenX;
                touchStartY = e.changedTouches[0].screenY;
            });
            
            gameBoard.addEventListener('touchend', (e) => {
                touchEndX = e.changedTouches[0].screenX;
                touchEndY = e.changedTouches[0].screenY;
                handleSwipe();
            });
            
            function handleSwipe() {
                const diffX = touchStartX - touchEndX;
                const diffY = touchStartY - touchEndY;
                
                if (Math.abs(diffX) > Math.abs(diffY)) {
                    // Horizontal swipe
                    if (diffX > 0) {
                        // Swipe left
                        move('left');
                    } else {
                        // Swipe right
                        move('right');
                    }
                } else {
                    // Vertical swipe
                    if (diffY > 0) {
                      // Swipe up
                        move('up');
                    } else {
                        // Swipe down
                        move('down');
                    }
                }
            }
            
            // Button event listeners
            newGameBtn.addEventListener('click', initGame);
            tryAgainBtn.addEventListener('click', initGame);
            
            // Initialize the game
            initGame();
        });
    </script>
</body>
</html>
